{"version":3,"sources":["utils/API.js","components/Table/index.js","pages/Employee.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Table","props","className","employees","map","employee","alt","src","picture","medium","name","first","last","phone","email","Date","dob","date","toLocaleDateString","Employee","state","search","sortType","loadEmployees","API","then","res","setState","data","results","console","log","catch","err","this","React","Component","Wrapper","Header","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+UAEe,EACC,WACZ,OAAOA,IAAMC,IAAI,iDCyBNC,MA3Bf,SAAeC,GACX,OACE,2BAAOC,UAAU,gCACf,+BACE,4BACE,qCACA,oCACA,qCACA,qCACA,uCAGJ,+BACCD,EAAME,UAAUC,KAAI,SAAAC,GAAQ,OAC3B,4BACE,4BAAI,yBAAKC,IAAG,MAASC,IAAKF,EAASG,QAAQC,UAC3C,4BAAKJ,EAASK,KAAKC,MAAnB,IAA2BN,EAASK,KAAKE,MACzC,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,OACd,4BAAK,IAAIC,KAAKV,EAASW,IAAIC,MAAMC,6BCY9BC,E,4MA5BbC,MAAQ,CACNjB,UAAW,GACXkB,OAAQ,GACRC,SAAU,I,EAOZC,cAAgB,WACdC,IACGC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZxB,UAAWuB,EAAIE,KAAKC,UAEtBC,QAAQC,IAAI,EAAKX,MAAMjB,cAExB6B,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,O,kEAX9BC,KAAKX,kB,+BAeL,OACA,kBAAC,EAAD,CAAOpB,UAAW+B,KAAKd,MAAMjB,gB,GAxBVgC,IAAMC,WCEdC,MAJf,SAAiBpC,GACf,OAAO,wCAAMC,UAAU,WAAcD,K,MCQxBqC,MARf,WACI,OACE,yBAAKpC,UAAU,UACb,uD,MCYOqC,MAXf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,OCArBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.e5e997d3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=10&nat=us\");\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nfunction Table(props) {\r\n    return (\r\n      <table className=\"table table-hover table-dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>Photo</th>\r\n            <th>Name</th>\r\n            <th>Phone</th>\r\n            <th>Email</th>\r\n            <th>Birth</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {props.employees.map(employee => (\r\n          <tr>\r\n            <td><img alt={`img`} src={employee.picture.medium}></img></td>\r\n            <td>{employee.name.first} {employee.name.last}</td>\r\n            <td>{employee.phone}</td>\r\n            <td>{employee.email}</td>\r\n            <td>{new Date(employee.dob.date).toLocaleDateString()}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n      </table>\r\n      );\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Table from \"../components/Table\";\r\n\r\nclass Employee extends React.Component {\r\n  state = {\r\n    employees: [],\r\n    search: \"\",\r\n    sortType: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadEmployees();\r\n  }\r\n\r\n  loadEmployees = () => {\r\n    API.getEmployees()\r\n      .then((res) => {\r\n        this.setState({\r\n          employees: res.data.results,\r\n        });\r\n        console.log(this.state.employees);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (   \r\n    <Table employees={this.state.employees} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Employee;\r\n","import React from 'react';\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Header () {\r\n    return (\r\n      <div className='header'>\r\n        <h1>Employee Directory HQ</h1>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Header;","import React from 'react';\r\nimport { HashRouter as Route } from 'react-router-dom';\r\nimport Employee from './pages/Employee';\r\nimport Wrapper from './components/Wrapper';\r\nimport Header from './components/Header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Wrapper>\r\n        <Header />\r\n        <Route exact path=\"/\" component={Employee} />\r\n      </Wrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}